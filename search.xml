<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>庆余年</title>
    <url>/2019/12/20/%E5%BA%86%E4%BD%99%E5%B9%B4/</url>
    <content><![CDATA[<p>都在看 《庆余年》，我也跑去看了一下，两个字， <b style="font-size:20px">上头</b>。</p>
<p>不过不影响它成为一个下饭剧</p>
]]></content>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>给站点添加了相册</title>
    <url>/2019/12/12/%E7%9B%B8%E5%86%8C/</url>
    <content><![CDATA[<p>摸鱼一下午，成功为网站添加了相册功能，站在巨人的肩膀好干活，嘻嘻。还是遇到了一些问题的，下面会一一列出。</p>
<a id="more"></a>
<p>先贴教程：<a href="https://www.liizhi.cn/2019/08/28/hexo-yilia-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">链接</a></p>
<p>教程中已经讲了很全面了，我只列举我自己遇到的教程中没有提到的问题！</p>
<h2 id="macOS-的-python-从默认的-V2-7-提升到-V3-8"><a href="#macOS-的-python-从默认的-V2-7-提升到-V3-8" class="headerlink" title="macOS 的 python 从默认的 V2.7 提升到 V3.8"></a>macOS 的 python 从默认的 V2.7 提升到 V3.8</h2><p>mac 是自带 <code>python</code> 的，但版本远远低于当前流行版本，相册的图片处理需要 <code>python</code> 的脚本。</p>
<p>亲测不升级搞不定。</p>
<p>新版下载地址：<a href="https://www.python.org/" target="_blank" rel="noopener">下载</a></p>
<p>下载完成后，一路同意到安装成功。接下来的才是重头戏：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开终端输入</span></span><br><span class="line">open ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入下面四行，如果之前有python的环境变量，删掉原来的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PYTHON_HOME=/Library/Frameworks/Python.framework/Versions/3.8</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PYTHON_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">alias</span> python=<span class="string">"/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"</span></span><br><span class="line"><span class="built_in">alias</span> pip=<span class="string">"/Library/Frameworks/Python.framework/Versions/3.8/bin/pip3.8"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件，使之生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>这个时候 ，在终端输入 <code>python -V</code>, 查看版本号，不出意外，是 <code>3.8</code></p>
<h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><p>众所周知，github 的图片加载可能会有点慢，为了图片的加载顺畅，我把处理图片的脚本和图片一并放在 国内的代码托管平台 码云 了。 可以去 <a href="https://gitee.com/fenda-tz/blog-pic.git" target="_blank" rel="noopener">看一下</a>。</p>
<p>同时，为了少敲命令，我加入了<code>husky</code>, 配合 <code>pre-add</code> 的 git 钩子，让 <code>python</code> 自己把脚本执行好之后再提交，省去了一步。此时，问题就来了。</p>
<p>直接在命令行使用脚本，顺利完成；但是配合 <code>husky</code> 之后，发现丢失依赖包的情况。</p>
<p>脚本本身在终端是可以 通过 <code>python tool.py</code>的命令行执行的，说明脚本没问题的对吧。那么问题出在了联合执行的脚本上，我是这么配置的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在package.json 中</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"image"</span>: <span class="string">"python tool.py"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-add"</span>: <span class="string">"npm run image"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我在 <code>git add .</code>的时候，就会出现上述问题。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>我是这样解决的，因为我本机安装了自带的 V2.7 和刚装的 V3.8 两个版本，应该指定一个版本去执行这个任务的。2.7 肯定不行 <del>行的话我也不用安装 3.8</del>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在package.json 中</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"image"</span>: <span class="string">"/usr/local/bin/python3.8 tool.py"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-add"</span>: <span class="string">"npm run image"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改之后从新执行 <code>git add .</code>, 运行结果完美！</p>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>其他问题教程中讲述的很详细，参照顶部的教程链接。祝我不加班。</p>
]]></content>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构的一些总结</title>
    <url>/2019/12/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="JavaScript-数据结构"><a href="#JavaScript-数据结构" class="headerlink" title="JavaScript 数据结构"></a>JavaScript 数据结构</h1><p>近期学习记录。（示例代码使用 ES6 中<code>class</code> 声明<code>类</code>）</p>
<a id="more"></a>
<hr>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈结构的特点是<code>先进后出</code>，新进入或者待删除的元素，称为<code>栈顶</code>，另一端叫<code>栈底</code>。比如一摞书的抽象模型。</p>
<h3 id="基于数组的栈"><a href="#基于数组的栈" class="headerlink" title="基于数组的栈"></a>基于数组的栈</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="comment">// 添加一个元素到栈顶</span></span><br><span class="line">    <span class="keyword">this</span>.items.push(element);</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="comment">// 移除栈顶的元素，同时返回被移除的元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="comment">//返回栈顶的元素，不对栈做任何修改</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="comment">// 清空栈</span></span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="comment">// 栈是否为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="comment">// 栈的长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基于对象的栈"><a href="#基于对象的栈" class="headerlink" title="基于对象的栈"></a>基于对象的栈</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  enqueue(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count - <span class="keyword">this</span>.lowestCount;</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上 2 种实现效果相同。但未做内部数据的保护，内部数据保护机制目前主要有四种方式：</p>
<ol>
<li>开发者自身约定，常见方式有变量前加<code>_</code>或<code>$</code>, 如<code>this._items</code>、<code>this.$items</code></li>
<li>使用<code>Symbol</code>的唯一性来制造保护机制</li>
<li>使用<code>WeakMap</code>的确保数据的唯一性</li>
<li>ECMAScript 类属性提案中私有属性提案</li>
</ol>
<h3 id="使用栈解决进制转换问题"><a href="#使用栈解决进制转换问题" class="headerlink" title="使用栈解决进制转换问题"></a>使用栈解决进制转换问题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNumber, base</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> remStack = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="keyword">const</span> digits = <span class="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">  <span class="keyword">let</span> number = decNumber;</span><br><span class="line">  <span class="keyword">let</span> rem;</span><br><span class="line">  <span class="keyword">let</span> baseString = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">if</span> (!(base &gt;= <span class="number">2</span> &amp;&amp; base &lt;= <span class="number">36</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(number % base);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number / base);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty()) &#123;</span><br><span class="line">    baseString += digits[remStack.pop()];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baseString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用栈的思想，解决有效括号问题（leetcode-算法题库第-20-题）"><a href="#使用栈的思想，解决有效括号问题（leetcode-算法题库第-20-题）" class="headerlink" title="使用栈的思想，解决有效括号问题（leetcode 算法题库第 20 题）"></a>使用栈的思想，解决有效括号问题（leetcode 算法题库第 20 题）</h3><p>题目如下：<br>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’  的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = &#123;</span><br><span class="line">    <span class="string">"("</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="string">")"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"["</span>: <span class="number">-2</span>,</span><br><span class="line">    <span class="string">"]"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"&#123;"</span>: <span class="number">-3</span>,</span><br><span class="line">    <span class="string">"&#125;"</span>: <span class="number">3</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map[s[i]] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      stack.push(s[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> last = stack.pop();</span><br><span class="line">      <span class="keyword">if</span> (map[last] + map[s[i]] !== <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (stack.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里的解题思路是将括号的左部分，压入栈中，判断对应项相加是否等于 0。这里单纯使用一个数组来代替<code>栈</code>。</p>
<hr>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列的数据结构特点是<code>先进先出</code>，在队列尾部添加新元素，从顶部移除新元素。例如，排队安检，打印机队列。</p>
<h3 id="基于对象的队列"><a href="#基于对象的队列" class="headerlink" title="基于对象的队列"></a>基于对象的队列</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  enqueue(element) &#123;</span><br><span class="line">    <span class="comment">// 向队列尾部添加一个新的项</span></span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="comment">// 删除队列的第一项，并返回</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="comment">// 返回队列中第一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="comment">// 队列是否为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="comment">// 当前队列的长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count - <span class="keyword">this</span>.lowestCount;</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="comment">// 清空队列</span></span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="击鼓传花问题"><a href="#击鼓传花问题" class="headerlink" title="击鼓传花问题"></a>击鼓传花问题</h3><p>孩子们围成一个圆圈，把花尽快地传递给旁边的人。某一时刻传花停止， 这个时候花在谁手里，谁就退出圆圈、结束游戏。重复这个过程，直到只剩一个孩子(胜者)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span>(<span class="params">elementsList, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line">  <span class="keyword">const</span> elimitatedList = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elementsList.length; i++) &#123;</span><br><span class="line">    queue.enqueue(elementsList[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">      queue.enqueue(queue.dequeue());</span><br><span class="line">    &#125;</span><br><span class="line">    elimitatedList.push(queue.dequeue());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    eliminated: elimitatedList,</span><br><span class="line">    winner: queue.dequeue() <span class="comment">// &#123;5&#125;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以用上面代码模拟击鼓传花，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">"John"</span>, <span class="string">"Jack"</span>, <span class="string">"Camila"</span>, <span class="string">"Ingrid"</span>, <span class="string">"Carl"</span>];</span><br><span class="line"><span class="keyword">const</span> result = hotPotato(names, <span class="number">7</span>);</span><br><span class="line">result.eliminated.forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>在击鼓传花游戏中被淘汰。`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`胜利者: <span class="subst">$&#123;result.winner&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<p>输出如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Camila 在击鼓传花游戏中被淘汰。</span><br><span class="line">Jack 在击鼓传花游戏中被淘汰。</span><br><span class="line">Carl 在击鼓传花游戏中被淘汰。</span><br><span class="line">Ingrid 在击鼓传花游戏中被淘汰。</span><br><span class="line">胜利者：John</span><br></pre></td></tr></table></figure>
<h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>双端队列允许同时从前端和后端添加和删除元素的特殊队列。<br>在现实生活中的例子有电影院、餐厅中排队的队伍等。举个例子，一个刚买了票的 人如果只是还需要再问一些简单的信息，就可以直接回到队伍的头部。另外，在队伍末尾的人如 果赶时间，他可以直接离开队伍。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deque</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count - <span class="keyword">this</span>.lowestCount;</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  addFront(element) &#123;</span><br><span class="line">    <span class="comment">// 在双端队列前端添加新的元素。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">this</span>.addBack(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lowestCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.lowestCount--;</span><br><span class="line">      <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount] = element;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="keyword">this</span>.count; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">this</span>.items[i] = <span class="keyword">this</span>.items[i - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count--;</span><br><span class="line">      <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span>.items[<span class="number">0</span>] = element;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addBack(element) &#123;</span><br><span class="line">    <span class="comment">// 在双端队列后端添加新的元素</span></span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">  removeFront() &#123;</span><br><span class="line">    <span class="comment">// 双端队列前端移除第一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">this</span>.lowestCount++;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">  removeBack() &#123;</span><br><span class="line">    <span class="comment">// 双端队列后端移除第一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  peekFront() &#123;</span><br><span class="line">    <span class="comment">// 双端队列前端的第一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">  &#125;</span><br><span class="line">  peekBack() &#123;</span><br><span class="line">    <span class="comment">// 双端队列后端的第一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双端队列解决回文字符串验证的问题（leetcode-算法题库第-125-题）"><a href="#双端队列解决回文字符串验证的问题（leetcode-算法题库第-125-题）" class="headerlink" title="双端队列解决回文字符串验证的问题（leetcode 算法题库第 125 题）"></a>双端队列解决回文字符串验证的问题（leetcode 算法题库第 125 题）</h3><p>题目如下：<br>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>
<p>说明：本题中，我们将空字符串定义为有效的回文串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> string === <span class="string">"string"</span> &amp;&amp; !string) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> isValid = !!string;</span><br><span class="line">  <span class="keyword">if</span> (!isValid) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> deque = <span class="keyword">new</span> Deque();</span><br><span class="line">  <span class="comment">// 转换小写，过滤空字符</span></span><br><span class="line">  string = string</span><br><span class="line">    .toLowerCase()</span><br><span class="line">    .split(<span class="string">" "</span>)</span><br><span class="line">    .join(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">let</span> isEqual = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">let</span> fisrtString, lastString;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; string.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> codeAt = string.charCodeAt(i);</span><br><span class="line">    <span class="keyword">if</span> ((codeAt &gt; <span class="number">47</span> &amp;&amp; codeAt &lt; <span class="number">58</span>) || (codeAt &gt; <span class="number">96</span> &amp;&amp; codeAt &lt; <span class="number">123</span>)) &#123;</span><br><span class="line">      deque.addBack(string[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (deque.size() &gt; <span class="number">1</span> &amp;&amp; isEqual) &#123;</span><br><span class="line">    fisrtString = deque.removeFront();</span><br><span class="line">    lastString = deque.removeBack();</span><br><span class="line">    <span class="keyword">if</span> (fisrtString !== lastString) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isEqual;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>关于图片被渣浪墙了之后</title>
    <url>/2019/12/06/%E5%9B%BE%E7%89%87%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<p>由于之前用的是新浪图床（新浪可不承认自己做了一个图床），新浪开启了防盗链，我尝试了设置 meta 标签 <code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code> 的做法，一开始是有效的，但是现在失效了。</p>
<p><br>我要说的是，没打算迁移到新的图床，现在用的是 码云 ，一是因为没有之前的图片备份，更重要的原因是我 <b>懒</b><br></p>

<p>就酱</p>
]]></content>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>我们为什么需要async/await?</title>
    <url>/2019/03/26/async/</url>
    <content><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2019/3/25/169b4d7c57ad2ba6?w=1270&amp;h=642&amp;f=png&amp;s=61453" alt=""></p>
<h2 id="async-是什么-amp-async-的基本用法"><a href="#async-是什么-amp-async-的基本用法" class="headerlink" title="async 是什么 &amp; async 的基本用法"></a>async 是什么 &amp; async 的基本用法</h2><blockquote>
<p><code>async function</code> 声明用于定义一个返回 <code>AsyncFunction</code> 对象的异步函数。异步函数是指通过事件循环异步执行的函数，它会通过一个隐式的 <code>Promise</code> 返回其结果。但是如果你的代码使用了异步函数，它的语法和结构会更像是标准的同步函数。<br>引用自 MDN。</p>
</blockquote>
<p>js 的方法和语法糖多数都是语义化的，从字面意思上来说，async 代表<code>异步的</code>，用来表示一个异步的函数，返回一个<code>promise</code>,可以使用 then 方法添加回调。<br>可以看下这个例子：</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">"芬达"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo())</span><br></pre></td></tr></table></figure>
<p><img src="https://user-gold-cdn.xitu.io/2019/3/25/169b5007faef78cc?w=361&amp;h=98&amp;f=png&amp;s=11660" alt=""><br>可以看到返回的是 promise 哦。这样不就可以愉快的写 then 式回调了嘛。<del>偷笑！</del><br>简单来说，只要使用了<code>async</code>, 就会返回一个<code>promise</code>。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/3/25/169b506cf80d02fd?w=700&amp;h=700&amp;f=jpeg&amp;s=41556" alt=""><br><del>猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/</del></p>
<h2 id="await-与-async-搭配的基本用法"><a href="#await-与-async-搭配的基本用法" class="headerlink" title="await 与 async 搭配的基本用法"></a>await 与 async 搭配的基本用法</h2><h3 id="await-在等谁"><a href="#await-在等谁" class="headerlink" title="await 在等谁"></a>await 在等谁</h3><p>await 在英汉词典中是动词 <strong>等候</strong> 的意思，用法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只能用在async函数中</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="keyword">await</span> promise</span><br></pre></td></tr></table></figure>
<p><code>await</code>可以让 js 进行等待，直到<code>promise</code>执行并返回结果时才会继续往下执行。可以看一个小例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo2 = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reslove(<span class="string">"芬达"</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> ret = <span class="keyword">await</span> promise</span><br><span class="line">  <span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;</span><br><span class="line">foo2()</span><br></pre></td></tr></table></figure>
<p>上面代码会在 1s 后打印<code>芬达</code>。<br>从上面代码来说，await 在等一个承诺，好吧，是<code>promise</code>,更严谨的来说，他是在等待一个表达式，只不过这个表达式可以是 promise，也可以是其他任意表达式的结果。所以，下面的代码是完全可以运行的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const foo3 = () =&gt; &apos;芬达&apos;</span><br><span class="line">const foo4 = async () =&gt; &#123;</span><br><span class="line">    const ret = await foo3()</span><br><span class="line">    console.log(ret)</span><br><span class="line">&#125;</span><br><span class="line">foo4()</span><br></pre></td></tr></table></figure>
<p>当然也是打印的<code>芬达</code>。</p>
<h3 id="await-等到了之后会做什么"><a href="#await-等到了之后会做什么" class="headerlink" title="await 等到了之后会做什么"></a>await 等到了之后会做什么</h3><p>通俗点说，你可以把 await 看做是一个运算符号，如果它等到的不是 promise，那么他的运算结果就是当前它所等到的值，如果等到的是 promise，那么他会临时阻塞后续代码，直到 promise 对象 resolve，取到 resolve 的值，将其作为运算结果返回。<br>emmmmm, 就是这样。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/3/25/169b528636e3055d?w=500&amp;h=313&amp;f=jpeg&amp;s=28421" alt=""><br><del>猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/</del></p>
<h2 id="async-和-promise-的联系"><a href="#async-和-promise-的联系" class="headerlink" title="async 和 promise 的联系"></a>async 和 promise 的联系</h2><p><code>async</code> 可以看做是<code>promise</code>与<code>Generator</code>的语法糖，但对其做了改进。</p>
<ul>
<li>内置执行器，<code>Generator</code>的执行必须依靠执行器，但<code>async</code>的执行器与生俱来，使得<code>async</code>函数与普通函数的调用别无二致。</li>
<li>更好的语义化，<del>就不做解释了吧</del></li>
<li>返回值是 promise，对开发者友好，感觉这个才是最重要的有木有。</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2019/3/25/169b54398321aa3a?w=534&amp;h=300&amp;f=jpeg&amp;s=17342" alt=""><br><del>猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/</del></p>
<h2 id="它能为我们做什么？"><a href="#它能为我们做什么？" class="headerlink" title="它能为我们做什么？"></a>它能为我们做什么？</h2><p>这个问题的答案应该是毋庸置疑的，必然是为了解决回调地狱。<code>async/await</code>的优势就在于处理 then 式调用链呢。<br>我们可以先假设一个场景: 用户登录之后拿到<code>userId</code>,然后在去调用接口拿到<code>token</code>,最后在其他接口的请求头里添加上<code>token</code>字段…..<del>别问为什么这么白痴的设计，假设而已</del></p>
<p>初级前端的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">"login"</span>, &#123; username, password &#125;, (&#123; userId &#125;) =&gt; &#123;</span><br><span class="line">  ajax(<span class="string">"getToken"</span>, &#123; userId &#125;, (&#123; token &#125;) =&gt; &#123;</span><br><span class="line">    ajax(<span class="string">"getOtherInfo"</span>, &#123; token &#125;, res =&gt; &#123;</span><br><span class="line">      <span class="comment">// do something...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>是不是头皮发麻，当然，如果你是写这样的代码的人，你可能觉得还可以接受，如果你是维护这样的代码的，你就会明白有多难维护，这里只写了三层，实际中甚至更多。意味着层级嵌套，牵一发而动全身，要改都得改的死胡同，意味着代码缩进都能恶心坏你，所以，初级大圆满前端是如何写的呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ajax(<span class="string">"login"</span>, &#123; username, password &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123; userId &#125;</span>) =&gt;</span> ajax(<span class="string">"getToken"</span>, &#123; userId &#125;))</span><br><span class="line">  .then(<span class="function">(<span class="params">&#123; token &#125;</span>) =&gt;</span> ajax(<span class="string">"getOtherInfo"</span>, &#123; token &#125;))</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>这样一来，利用链式 then 调用，既可以清晰的展现 api 依赖关系，又可以优雅的缩进代码，但我们是讲<code>async</code>的啊老铁，所以还是看下吧<code>asynv</code>大法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123; username, password &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; userId &#125; = <span class="keyword">await</span> ajax(<span class="string">"login"</span>, &#123; username, password &#125;)</span><br><span class="line">  <span class="keyword">const</span> &#123; token &#125; = <span class="keyword">await</span> ajax(<span class="string">"getToken"</span>, &#123; userId &#125;)</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> ajax(<span class="string">"getOtherInfo"</span>, &#123; token &#125;)</span><br><span class="line">  <span class="comment">// do something ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面有提到，<code>await</code>会临时阻塞后续代码的执行，这就代表着接口调用会按照我们的代码顺序”同步”执行（说是同步，<strong>实际上还是异步请求</strong>，表现为同步行为是语法糖的原因）。这样，代码就会按照我们的预期执行，接口依赖关系也更加明了，维护起来也是赏心悦目的。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/3/25/169b5749469a3522?w=500&amp;h=276&amp;f=gif&amp;s=489765" alt=""></p>
<p><del>猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/</del></p>
<h2 id="它的优点和缺陷"><a href="#它的优点和缺陷" class="headerlink" title="它的优点和缺陷"></a>它的优点和缺陷</h2><p>上面有谈到他一部分的优点，其实还有如下优点</p>
<ul>
<li>语法简洁，使代码可读性更高</li>
<li>能使用<code>try catch</code>捕获异常</li>
<li>使代码更加符合思维逻辑。</li>
</ul>
<p>至于缺点呢…</p>
<ul>
<li>需要 babel 编译</li>
<li>缺少 abort 请求中断，缺少异步控制流程。</li>
<li>异常捕获较为麻烦</li>
<li>没有依赖关系的请求需要借助 promise.all</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2019/3/25/169b5815659f27b9?w=500&amp;h=500&amp;f=jpeg&amp;s=28853" alt=""></p>
<p><del>猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/</del></p>
<h2 id="如何优雅的在-async-await-中处理错误"><a href="#如何优雅的在-async-await-中处理错误" class="headerlink" title="如何优雅的在 async/await 中处理错误"></a>如何优雅的在 async/await 中处理错误</h2><p>理论上来说，<code>await</code>等到的可能是 promise.reject,这种情况可以使用<code>try/catch</code>来捕获异常，ok 没毛病，像下面这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; userId &#125; = <span class="keyword">await</span> ajax(<span class="string">"login"</span>, &#123; username, password &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"no user found"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>But，如果像上面一样有很多个<code>await</code>呢，怎么办，每次都要写一下嘛，这样岂不是很难受？上周在沸点看到一位大佬对 promise 的异常处理，很有意义。如图<br><img src="https://user-gold-cdn.xitu.io/2019/3/25/169b58a27cf51e28?w=1098&amp;h=1062&amp;f=jpeg&amp;s=85317" alt="">，<br>同样的啊，<code>async</code>也是可以借助<code>promise</code>来实现统一的异常捕获。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">util</span>(<span class="params">promise</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> promise.then(<span class="function"><span class="params">data</span> =&gt;</span> [<span class="literal">null</span>, data]).catch(<span class="function"><span class="params">err</span> =&gt;</span> [err])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123; usernam, password &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userId, token, err</span><br><span class="line">  ;[err, &#123; userId &#125;] = <span class="keyword">await</span> util(ajax(<span class="string">"login"</span>, &#123; username, password &#125;))</span><br><span class="line">  <span class="comment">// 因默认数据返回是对象，所以加了解构，部分省略...</span></span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没有大佬的考虑全面，但也足以应付日常需求了<br><img src="https://user-gold-cdn.xitu.io/2019/3/25/169b59377ec4cebd?w=500&amp;h=313&amp;f=jpeg&amp;s=23324" alt=""><br><del>猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/猫咪分割线/</del></p>
<h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><p><code>async/await</code>总的来说，是一个优秀的异步解决方案，利大于弊，值得一用。</p>
<p>因为我平时用 async 的频率很低，所以专门总结了这篇文字。如果有什么错误还请各位大佬指正。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/5ab60c606fb9a028bc2db1d4" target="_blank" rel="noopener">Async +Await</a><br><a href="https://zhuanlan.zhihu.com/p/26505825" target="_blank" rel="noopener">精读 Async/Await 更优越的 6 大理由</a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>hotkey.js 的使用</title>
    <url>/2019/02/18/hotkey/</url>
    <content><![CDATA[<h1 id="hotkey-js-的使用"><a href="#hotkey-js-的使用" class="headerlink" title="hotkey.js 的使用"></a>hotkey.js 的使用</h1><p>在一个小项目中遇到了快捷键的小需求，所以选择了 <code>hotkey.js</code>。目前该项目的 star 数 3277。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hotkeys-js --save</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>我们是要在线上仍然使用这个 js 库，所以并不是安装到开发依赖中。</p>
<a id="more"></a>
<hr>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hotkeys <span class="keyword">from</span> <span class="string">"hotkeys-js"</span></span><br><span class="line"></span><br><span class="line">hotkeys(<span class="string">"f5"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, handler</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Prevent the default refresh event under WINDOWS system</span></span><br><span class="line">  event.preventDefault()</span><br><span class="line">  alert(<span class="string">"you pressed F5!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">hotkeys(<span class="string">"ctrl+a,ctrl+b,r,f"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (handler.key) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ctrl+a"</span>:</span><br><span class="line">      alert(<span class="string">"you pressed ctrl+a!"</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ctrl+b"</span>:</span><br><span class="line">      alert(<span class="string">"you pressed ctrl+b!"</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"r"</span>:</span><br><span class="line">      alert(<span class="string">"you pressed r!"</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"f"</span>:</span><br><span class="line">      alert(<span class="string">"you pressed f!"</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>我的需求是多组跨快捷键的定义，所以写法我采用的是第二种。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><code>hotkey</code>默认不监听 <code>input</code> <code>select</code> <code>textarea</code>，即元素获取焦点时不触发定义的快捷键。<br>要想达到监听的需求，需要写一句这样的代码<br><code>hotkeys.filter = () =&gt; true</code>，将所有情况全部返回 true</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用这个库我成功的为自己的 markdown 在线编辑器添加了快捷键功能。<a href="https://ch957869975.github.io/md-editor/dist/">编辑器地址</a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>9102年如何写一个自己的markdown在线编辑器</title>
    <url>/2019/02/16/editor/</url>
    <content><![CDATA[<p>涵盖了大多数 markdown 语法的快捷操作，实时编译实时预览，支持直接导出 md 格式文件，支持微博图床。纯前端实现，不必担心数据被后台存储。</p>
<h2 id="背景-amp-前言"><a href="#背景-amp-前言" class="headerlink" title="背景 &amp; 前言"></a>背景 &amp; 前言</h2><p>市面上一些 md 编辑器 有的有实时预览，比如掘金，没有操作按钮（有快捷键的哈)，用着不是太方便，而简书的操作按钮有的受限于简书钻的数量。事实上有道词典的 md 编辑器做的很好，但最近出现了我出现了卡顿、中文难以输入上去的问题，弃之。<br>所以干脆自己撸一个，可以满足自己写东西的需求。 <del>自己做的东西就算难用也得受着</del><br>由于手上没有 windows 设备，滚动条的样式还请自己修改下。</p>
<hr>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p><code>vue</code> <code>less</code> <code>iview</code> <code>markdown-it</code> <code>iconfont</code></p>
<hr>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><code>markdown-it-mark</code> 标记功能<br> <code>markdown-it-emoji</code> emoji 表情解析<br><code>highligh.js</code>代码高亮</p>
<a id="more"></a>
<p><code>markdown-it-task-checkbox</code> 复选框功能<br><code>markdown-it-footnote</code> 脚注功能</p>
<hr>
<h2 id="插件效果"><a href="#插件效果" class="headerlink" title="插件效果"></a>插件效果</h2><p>==高亮标记==<br>:smiling_imp:</p>
<ul>
<li style="list-style: none"><input type="checkbox"> text</li>
<li style="list-style: none"><input type="checkbox" checked> text  <pre><code>^[脚注 1] ^[脚注 2]
</code></pre></li>
</ul>
<p>掘金没有支持<code>标记</code>与<code>emoji</code>，贴一下图。<br><img src="https://ws1.sinaimg.cn/mw690/0072Lfvtly1g08743vn20j302a03i0sl.jpg" alt=""></p>
<hr>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在编辑器输入组件中 <code>watch</code>输入内容的变化，有变化就实时调用<code>markdown-it</code>的<code>render</code>函数，并在<code>localStorage</code>中实时更新一份，防止页面误操作被跳出再返回时辛辛苦苦写的内容没了。同时也可以达到这次没写完页面关闭了，下次打开继续写的需求。 <strong>导出文件后草稿会被清空。</strong><br><strong>因为不调用接口存储数据，未做函数防抖处理，如需引入请自行添加。</strong><br>微博图床的地址是从一个工具页面上扒下来的，感觉写那个工具的兄弟也是从其他的地方扒的呢哈哈（开玩笑的），贴出工具地址：<a href="http://tool.mkblog.cn/tuchuang/" target="_blank" rel="noopener">图床工具</a></p>
<hr>
<h2 id="下载打包"><a href="#下载打包" class="headerlink" title="下载打包"></a>下载打包</h2><p><code>git clone git@github.com:ch957869975/md-editor.git</code><br> <code>npm run dev</code> 或 <code>npm run build</code><br>打开 8080 端口即可看到预览<br><img src="https://ws1.sinaimg.cn/mw690/0072Lfvtly1g081m8s9w9j32cm1l2qbc.jpg" alt=""></p>
<hr>
<h2 id="有意思的点"><a href="#有意思的点" class="headerlink" title="有意思的点"></a>有意思的点</h2><p>做的时候遇到几个点比较有意思，提一下。</p>
<h3 id="在光标位置插入字符"><a href="#在光标位置插入字符" class="headerlink" title="在光标位置插入字符"></a>在光标位置插入字符</h3><p>ie 支持<code>document.selection</code>，而绝大多数浏览器支持<code>selectionStart</code> 与 <code>selectionEnd</code> 两个属性。利用这两个属性加上字符串的<code>substring</code>方法动态拼接起来。 <strong>这里需要注意的是 用这个方法拼接起来的字符串，并没有触发对变量的双向绑定，所以我在这里手动触发了一下<code>textarea</code>的 input 事件，如下：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"textarea"</span>).dispatchEvent(<span class="keyword">new</span> Event(<span class="string">"input"</span>))</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="文件在前端生成并下载"><a href="#文件在前端生成并下载" class="headerlink" title="文件在前端生成并下载"></a>文件在前端生成并下载</h3><p>下载在前端开发中并不稀奇，但文件写入可能不常遇到，要不是写这个玩意，我也没做工文件生成。<br><strong>代码如下：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.editorContent || !<span class="built_in">window</span>.localStorage.getItem(<span class="string">"MarkdownDraft"</span>)) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.$Notice.error(&#123; <span class="attr">title</span>: <span class="string">"你还没有写内容"</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> content = <span class="keyword">this</span>.editorContent</span><br><span class="line"><span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>)</span><br><span class="line">elem.download = <span class="string">"draft.md"</span></span><br><span class="line">elem.style.display = <span class="string">"none"</span></span><br><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([content], &#123; <span class="attr">type</span>: <span class="string">"text/plain"</span> &#125;)</span><br><span class="line">elem.href = URL.createObjectURL(blob)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(elem)</span><br><span class="line">elem.click()</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(elem)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.editorContent = <span class="string">""</span></span><br><span class="line">  <span class="built_in">window</span>.localStorage.removeItem(<span class="string">"MarkdownDraft"</span>)</span><br><span class="line">&#125;, <span class="number">300</span>)</span><br></pre></td></tr></table></figure>
<p>思路还是比较清晰的：有值的时候才生成， <strong>避免生成一个空文件</strong>。 利用<code>Blob</code>对象生成对应内容后，再创建一个 <strong>不可见的<code>a</code>标签并将 <code>href</code>和<code>download</code>属性添加进去，手动触发点击事件后并移除该标签。</strong><br><strong>但是需要考虑兼容性呀。</strong><br>这里是<code>a.download</code>的支持情况，ie 不支持！！！。<br><img src="https://ws1.sinaimg.cn/mw690/0072Lfvtly1g0865h55q4j30z20ay40d.jpg" alt=""></p>
<p>木得办法，做个判断吧。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!(&apos;download&apos; in document.createElement(&apos;a&apos;))) return this.$Notice.error(&#123; title: &apos;浏览器不支持&apos; &#125;)</span><br></pre></td></tr></table></figure>
<p>可能你说 ie 怎么办？<br>回答：都 9102 年了，你还在用 ie，不抛弃你抛弃谁？？</p>
<hr>
<h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><p>组件之间通信，因为偷懒，用了<code>bus.js</code>，实际代码就两行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure>
<p>原理是 <strong>挂载在同一实例上的组件都可以触发实例上的事件</strong>，理论上是可以实现任意组件之间的通信，无视组件层级关系。但是， <strong>并不推荐这种做法，因为这会让你的逻辑太跳跃，具体表现就是你的代码东一榔头西一棒子，A 组件在 bus 上绑定的事件经常找不到在哪里触发的，B 组件触发的事件找不到是在哪里绑定的，维护起来较为困难。</strong></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>功能简单、技术简单、ui 简单、部署简单。一个简单的小项目，就看你愿不愿意去做了。</p>
<p>这里贴出<a href="https://ch957869975.github.io/md-editor/dist/">编辑器地址</a>与<a href="https://github.com/ch957869975/md-editor" target="_blank" rel="noopener">源码地址</a>。<strong>厚着脸皮求个 star</strong>。<br><a href="https://ch957869975.github.io/hexo-blog/">博客地址</a></p>
<p>不是所有的事情都能如愿以偿，但是任何事情都值得去尝试。加油！<br>ps: 下面两个脚注对应插件效果演示，不必关心。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用css绘制钻石</title>
    <url>/2019/02/08/diamond/</url>
    <content><![CDATA[<p>听说你想要钻石 💎？买不起，还是用 css 来画一个吧，但你敢送给自己女朋友，不保证不被打。</p>
<p>下午两点要相亲，要不把这个送相亲对象？</p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>先看下效果吧，想一想怎么构图先。<br><img src="https://user-gold-cdn.xitu.io/2019/2/8/168caeba3f9f72ad?w=494&amp;h=424&amp;f=jpeg&amp;s=18726" alt=""></p>
<p>上图是已经完成的效果。钻石整体都是由三角形构成，上五下三。上边是五个等边三角形，其中有 2 个是倒扣过来填补三个之间的空缺。下边是一个等腰三角形和 2 个对称的钝角三角形，差不多就是这样。（钝角三角形不是太好理解，至少我没成功，这里的钝角三角形是用等腰三角形通过<code>transform: skew()</code>实现的）</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p>这个 demo 中涉及到了 css3 的 <code>transform</code>, css 画三角形 以及 <strong>如何给 css 画出的三角形加边框</strong>，三角形的边框构成了钻石的棱角（白色的线条），预处理语言使用的是<code>less</code>。</p>
<a id="more"></a>
<p><strong>三角形的边框</strong>：我们知道，三角形本来就是用<code>border</code>画的，给三角形加边框相当于给<code>border</code>加<code>border</code>,这个做法肯定行不通。我是这样做的：画 2 个三角形，一个大的一个小的，小的比大的小<code>1px</code>,然后小的盖在大的上面，这样大三角形就只漏出<code>1px</code>,视觉效果就是成为了内部小三角形的边框线了。<a href="https://www.cnblogs.com/blosaa/p/3823695.html" target="_blank" rel="noopener">参考博文</a></p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="dom-准备"><a href="#dom-准备" class="headerlink" title="dom 准备"></a>dom 准备</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"diamond"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"t"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common bottom bottom1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common bottom bottom2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"common bottom bottom3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>三角形的个数是上五下三。<del>请忽略命名，please</del></p>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="钻石上部分"><a href="#钻石上部分" class="headerlink" title="钻石上部分"></a>钻石上部分</h3><p>先把<code>common</code>的样式定义出来</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#diamond</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="selector-class">.t</span> &#123;</span><br><span class="line">    <span class="comment">//直接定义了高度免去了清除浮动</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.common</span> &#123;</span><br><span class="line">    <span class="comment">// 公共样式</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid; <span class="comment">// 元素本身做大三角形，衬底成为小三角形的边框</span></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="comment">// 伪元素定义小三角形</span></span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">border-style</span>: solid;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="comment">// 钻石顶部的5个三角形特定样式</span></span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">30px</span> <span class="number">30px</span>; <span class="comment">// 三角形大小</span></span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="number">#fff</span>; <span class="comment">// 三角形颜色</span></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="comment">// 小三角形</span></span><br><span class="line">      <span class="attribute">top</span>: <span class="number">1px</span>; <span class="comment">// 移动三角形使之盖在底部的大的三角形</span></span><br><span class="line">      <span class="attribute">left</span>: -<span class="number">28px</span>;</span><br><span class="line">      <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">28px</span> <span class="number">28px</span>; <span class="comment">// 小三角形的大小定义</span></span><br><span class="line">      <span class="attribute">border-color</span>: transparent transparent red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</span><br><span class="line">      <span class="comment">// 第二个第四个三角形倒立。</span></span><br><span class="line">      <span class="attribute">transform</span>: rotate(<span class="number">180deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:nth-child(n</span> + <span class="selector-tag">2</span>) &#123;</span><br><span class="line">      <span class="comment">// 从第二个开始都向左移动30px</span></span><br><span class="line">      <span class="attribute">margin-left</span>: -<span class="number">30px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在样式中都做了注释，不再赘述 ， <del>我会说我赶时间去相亲？</del> 到这呢效果只有钻石上面的部分。如下图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/2/8/168cb15a3d59a634?w=494&amp;h=148&amp;f=jpeg&amp;s=5877" alt=""></p>
<h3 id="钻石下部分"><a href="#钻石下部分" class="headerlink" title="钻石下部分"></a>钻石下部分</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上部分的样式省略了</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">90px</span> <span class="number">30px</span> <span class="number">0</span> <span class="number">30px</span>; <span class="comment">// 高度适当的高点，这里给了90px</span></span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#fff</span> transparent transparent; <span class="comment">// 三角形向下，底色白色</span></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="comment">// 同上，做出内部红色的小三角形，尺寸稍小，漏出白色的“边框线”</span></span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">88px</span> <span class="number">28px</span> <span class="number">0</span> <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#f00</span> transparent transparent;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">89px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">28px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *   到这应该是三个等腰三角形</span></span><br><span class="line"><span class="comment">     *   第一个第三个三角形应该要是钝角三角形的。</span></span><br><span class="line"><span class="comment">     *   所以要进行一下倾斜操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.bottom1</span> &#123;</span><br><span class="line">    <span class="comment">// 底部第一个三角形倾斜转换</span></span><br><span class="line">    <span class="attribute">transform</span>: skew(<span class="number">33.5deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.bottom3</span> &#123;</span><br><span class="line">    <span class="comment">// 底部第三个三角形倾斜转换，与第一个对称</span></span><br><span class="line">    <span class="attribute">transform</span>: skew(-<span class="number">33.5deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 数学不好，这个角度是我试了几次试出来的，数学好的可以算下呢，啊哈哈哈</span></span><br></pre></td></tr></table></figure>
<p>注释里都写了。<del>不赘述不赘述，别问为什么。</del></p>
<p>差不多就是这样了，上一下效果。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/2/8/168caeba3f9f72ad?w=494&amp;h=424&amp;f=jpeg&amp;s=18726" alt=""></p>
<p><del>我会说这就是一开始的效果图？</del> 总觉得差点什么，duangduang 加一下特效</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/2/8/168cb2d704d2f3b4?w=688&amp;h=562&amp;f=jpeg&amp;s=30703" alt=""></p>
<p>buling buling 的效果，啊哈哈哈哈哈哈。</p>
<h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>张鑫旭大神博客中有 不包含钻石棱角的实现，在第 26 个图形中。 <a href="https://www.zhangxinxu.com/wordpress/2019/01/pure-css-shapes/" target="_blank" rel="noopener">地址在此</a></p>
<p>祝新年快乐，万事顺意。愿往后的生活没有相亲和 IE 浏览器。</p>
<p>效果已出，感谢阅读。<br><a href="https://codepen.io/ch957869975/pen/VgrNyW" target="_blank" rel="noopener">源码在此</a> 或访问 <a href="https://ch957869975.github.io/hexo-blog/">我的博客</a></p>
<p>送个福利，<a href="http://apps.eky.hk/css-triangle-generator/zh-hant" target="_blank" rel="noopener">css 三角形产生器</a> 。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>图形</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟 dom 实现（今日头条面试题）</title>
    <url>/2019/02/06/virtual-dom/</url>
    <content><![CDATA[<p>给出如下虚拟 dom 的数据结构，如何实现简单的虚拟 dom，渲染到目标 dom 节点数</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tagName"</span>: <span class="string">"ul"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">"props"</span>: &#123; <span class="attr">"class"</span>: <span class="string">"list"</span> &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">"children"</span>: [</span><br><span class="line">    &#123; <span class="attr">"tagName"</span>: <span class="string">"li"</span>, <span class="attr">"children"</span>: [<span class="string">"douyin"</span>] &#125;,</span><br><span class="line">    &#123; <span class="attr">"tagName"</span>: <span class="string">"li"</span>, <span class="attr">"children"</span>: [<span class="string">"toutiao"</span>] &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>构建一个 render 函数，将 demoNode 对象渲染为以下 dom</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>douyin<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>toutiao<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里实际上有两个关键点：</p>
<p>1.通过 JavaScript 来构建虚拟的 DOM 树结构，并将其呈现到页面中；</p>
<p>2.当数据改变，引起 DOM 树结构发生改变，从而生成一颗新的虚拟 DOM 树，将其与之前的 DOM 对比，将变化部分应用到真实的 DOM 树中，即页面中。</p>
<h2 id="构建虚拟-dom"><a href="#构建虚拟-dom" class="headerlink" title="构建虚拟 dom"></a>构建虚拟 dom</h2><p>构造函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 构建dom树</span></span><br><span class="line"><span class="comment"> * @Params:</span></span><br><span class="line"><span class="comment"> * tagName(string)(requeired)</span></span><br><span class="line"><span class="comment"> *  props(object)(optional)</span></span><br><span class="line"><span class="comment"> * children(array)(optional)</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Element</span>(<span class="params">&#123; tagName, props, children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Element)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Element(&#123; tagName, props, children &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.tagName = tagName</span><br><span class="line">  <span class="keyword">this</span>.props = props || &#123;&#125;</span><br><span class="line">  <span class="keyword">this</span>.children = children || []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而我们需要像这样去调用它：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = Element(&#123;</span><br><span class="line">  tagName: <span class="string">"ul"</span>,</span><br><span class="line">  props: &#123; <span class="attr">class</span>: <span class="string">"list"</span> &#125;,</span><br><span class="line">  children: [</span><br><span class="line">    Element(&#123; <span class="attr">tagName</span>: <span class="string">"li"</span>, <span class="attr">children</span>: [<span class="string">"douyin"</span>] &#125;),</span><br><span class="line">    Element(&#123; <span class="attr">tagName</span>: <span class="string">"li"</span>, <span class="attr">children</span>: [<span class="string">"toutiao"</span>] &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后需要考虑的是，如何把节点插入到真实 dom 中，需要实现一个 render 函数，优先考虑<code>深度优先遍历（DFS）</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Element.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="keyword">this</span>.tagName),</span><br><span class="line">    props = <span class="keyword">this</span>.props,</span><br><span class="line">    propName,</span><br><span class="line">    propValue</span><br><span class="line">  <span class="keyword">for</span> (propName <span class="keyword">in</span> props) &#123;</span><br><span class="line">    propValue = props[propName]</span><br><span class="line">    el.setAttribute(propName, propValue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.children.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> childEl = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">      childEl = child.render()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      childEl = <span class="built_in">document</span>.createTextNode(child)</span><br><span class="line">    &#125;</span><br><span class="line">    el.appendChild(childEl)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> el</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设我们将这个 dom 结构插入到 body 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = Element(&#123;</span><br><span class="line">  tagName: <span class="string">"ul"</span>,</span><br><span class="line">  props: &#123; <span class="attr">class</span>: <span class="string">"list"</span> &#125;,</span><br><span class="line">  children: [</span><br><span class="line">    Element(&#123; <span class="attr">tagName</span>: <span class="string">"li"</span>, <span class="attr">children</span>: [<span class="string">"douyin"</span>] &#125;),</span><br><span class="line">    Element(&#123; <span class="attr">tagName</span>: <span class="string">"li"</span>, <span class="attr">children</span>: [<span class="string">"toutiao"</span>] &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"body"</span>).appendChild(elem.render())</span><br></pre></td></tr></table></figure>
<p>晚安, 🌛</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 之 let &amp; const</title>
    <url>/2019/02/06/let-const/</url>
    <content><![CDATA[<h1 id="浅析-let-与-const"><a href="#浅析-let-与-const" class="headerlink" title="浅析 let 与 const"></a>浅析 let 与 const</h1><p>今天学习一下 ES6 的两种声明方式，得先从说<code>var</code>说起,</p>
<h2 id="先说var"><a href="#先说var" class="headerlink" title="先说var"></a>先说<code>var</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a === <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以变形成</span></span><br><span class="line"><span class="keyword">var</span> value</span><br><span class="line"><span class="keyword">if</span> (a === <span class="literal">true</span>) &#123;</span><br><span class="line">  value = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只要不是新手，都应该明白这两个代码块是相等的。为什么呢,因为<code>var</code>声明存在变量提升，此时如果<code>a !== true</code>成立时,则<code>value</code>应该等于<code>undefined</code>,同理，<code>var</code>声明的<code>function</code>也是存在变量提升行为的。下面是一个 for 循环</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>我们知道,即使循环结束了我们仍然可以访问到<code>i</code>,此时控制台打印的是 10，为了解决这个问题，ES6 引入了块级作用域。</p>
<h2 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h2><h3 id="1-无变量提升行为"><a href="#1-无变量提升行为" class="headerlink" title="1.无变量提升行为"></a>1.无变量提升行为</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> value2 = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(value) <span class="comment">// Uncaught ReferenceError: value is not defined</span></span><br></pre></td></tr></table></figure>
<h3 id="2-重复声明报错"><a href="#2-重复声明报错" class="headerlink" title="2.重复声明报错"></a>2.重复声明报错</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="number">1</span> <span class="comment">// Uncaught SyntaxError: Identifier 'value' has already been declared</span></span><br><span class="line"><span class="keyword">const</span> ...</span><br></pre></td></tr></table></figure>
<h3 id="3-暂时死区"><a href="#3-暂时死区" class="headerlink" title="3.暂时死区"></a>3.暂时死区</h3><p><code>let</code> 和 <code>const</code>声明不会有变量提升存在，在声明之前访问这个变量会导致报错，称之为<code>暂时死区</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(value) <span class="comment">// test.html:63 Uncaught ReferenceError: value is not defined</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="number">1</span></span><br><span class="line"><span class="comment">// const 与之同理</span></span><br></pre></td></tr></table></figure>
<h3 id="4-块级作用域"><a href="#4-块级作用域" class="headerlink" title="4.块级作用域"></a>4.块级作用域</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="number">10</span></span><br><span class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="number">20</span></span><br><span class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const 与之同理</span></span><br></pre></td></tr></table></figure>
<h3 id="5-const-只能在声明的时候赋值"><a href="#5-const-只能在声明的时候赋值" class="headerlink" title="5.const 只能在声明的时候赋值"></a>5.const 只能在声明的时候赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> value</span><br><span class="line">value = <span class="number">10</span> <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>个人觉得在实际开发中更应使用<code>const</code>保持变量的不变，在变量需要改变时才使用<code>let</code>,这样数据初始化后不会改变，避免了很多 bug 产生。</p>
<p>晚安 🌛</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手实现图片懒加载</title>
    <url>/2019/02/06/lazy-image/</url>
    <content><![CDATA[<p>懒加载作为节约性能开支的优化项，已经必不可少。理所应当的成为前端必做工作之一。<br>针对这个老生常谈的话题，自己还是想亲自动手自己撸一个。</p>
<h2 id="懒加载的原理"><a href="#懒加载的原理" class="headerlink" title="懒加载的原理"></a>懒加载的原理</h2><p>其实也不是什么难的原理，页面内部打的<code>&lt;img&gt;</code>标签如果没有<code>src</code>属性，浏览器就不会去发出请求进而加载图片资源,此时显示的是默认的占位图（或元素）,没有请求，性能自然没话说。这个时候我们要做的就是让出现在可视区内的图片发出请求，加载图片，通过 js 动态设置<code>src</code>。说干就干</p>
<h2 id="开始实现懒加载"><a href="#开始实现懒加载" class="headerlink" title="开始实现懒加载"></a>开始实现懒加载</h2><p>一个问题，实际的 url 存在哪里？我们优先选择<code>data-*</code>自定义属性集，叫什么无所谓，你自己记住就好<br>随便写下 dom 结构，只是为了做简易 demo，实际开发中结构要和设计相关联。</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"lazy"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-src</span>=<span class="string">"http://img.pconline.com.cn/images/upload/upc/tx/wallpaper/1301/05/c0/17135331_1357355776882.jpg"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"lazy"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-src</span>=<span class="string">"http://f.hiphotos.baidu.com/zhidao/pic/item/eac4b74543a982267a3d54978a82b9014b90eb86.jpg"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"lazy"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-src</span>=<span class="string">"http://pic1.win4000.com/wallpaper/2/58b61f7dc6c1d.jpg"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"lazy"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-src</span>=<span class="string">"http://file03.16sucai.com/2017/1100/16sucai_p20161106032_0c2.JPG"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"lazy"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-src</span>=<span class="string">"http://imgsrc.baidu.com/image/c0%3Dpixel_huitu%2C0%2C0%2C294%2C40/sign=5a7938d38acb39dbd5cd6f16b96e6c48/aec379310a55b3196c79de4c48a98226cffc1702.jpg"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"lazy"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-src</span>=<span class="string">"http://c.hiphotos.baidu.com/zhidao/pic/item/8d5494eef01f3a2987a8062f9f25bc315d607ceb.jpg"</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面是对应这个结构的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.lazy</span> &#123;</span><br><span class="line">  <span class="comment">/*占位背景图*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"./img/loading.gif"</span>) no-repeat center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">490px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">242px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="懒加载类"><a href="#懒加载类" class="headerlink" title="懒加载类"></a>懒加载类</h3><p>我们将<code>&lt;img&gt;</code>的<code>class</code>作为参数传进来，构建图片资源列表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lazy</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(selector) &#123;</span><br><span class="line">      <span class="comment">// 懒记载图片列表，将伪数组转为数组，以便可以使用数组的api</span></span><br><span class="line">      <span class="keyword">this</span>.imageList = [...document.querySelectorAll(selector)]</span><br><span class="line">      <span class="comment">// 或使用下面方法,同样的效果</span></span><br><span class="line">      <span class="comment">// this.imageList = Array.prototype.slice.call(document.querySelectorAll(selector))</span></span><br><span class="line">      <span class="keyword">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 判断图片是否在可视区内</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    inViewShow() &#123;</span><br><span class="line">      <span class="keyword">const</span> len = <span class="keyword">this</span>.imageList.length</span><br><span class="line">      <span class="keyword">if</span>(!<span class="keyword">this</span>.imageList.length) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">this</span>.imageList.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> rect = item.getBoundingClientRect()</span><br><span class="line">        <span class="comment">// 出现在可视区域内则加载图片</span></span><br><span class="line">        <span class="keyword">if</span> (rect.top &gt; <span class="built_in">document</span>.documentElement.clientHeight) <span class="keyword">return</span></span><br><span class="line">        <span class="comment">// 赋值src,加载实际资源</span></span><br><span class="line">        item.src = item.dataset.src</span><br><span class="line">        <span class="comment">// 将当前的img移除加载列表（为什么没有使用map的第二个参数可以思考下）</span></span><br><span class="line">        <span class="keyword">const</span> index = <span class="keyword">this</span>.imageList.findIndex(<span class="function"><span class="params">img</span> =&gt;</span> img.dataset.src === item.dataset.src)</span><br><span class="line">        <span class="keyword">this</span>.imageList.splice(index, <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 如果全部都加载完 则去掉滚动事件监听</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.imageList.length) <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.inViewShow)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    init() &#123;</span><br><span class="line">      <span class="keyword">this</span>.inViewShow()</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.inViewShow)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，我们简单的实现了图片懒加载。but，少点什么。<code>scroll</code>作为一个高频事件，<code>inViewShow</code>就会随着滚动频率<br>无限的被触发，这样不好，要做些限制才行。<br>实际上，函数的防抖和节流一直是优化点而存在。可以使用<code>lodash</code>已经封装好的<a href="http://www.css88.com/doc/lodash/#_throttlefunc-wait0-options" target="_blank" rel="noopener">节流函数</a>。但因为现在要封装独立的<code>Lazy</code>类，依赖越少越好，所以还是我们自己写一个吧。</p>
<h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><p>一般来说，节流函数需要三个参数<code>fn</code>, <code>delay</code>, <code>must</code>, 分别是函数体，延时时间，必须运行时间。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">throttle(fn, delay = <span class="number">15</span>, must = <span class="number">30</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> t_start = <span class="literal">null</span> <span class="comment">// 开始时间</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">// 定时器</span></span><br><span class="line">  <span class="keyword">const</span> context = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t_current = +(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">    <span class="keyword">const</span> args = [...arguments]</span><br><span class="line">    clearTimeout(timer)</span><br><span class="line">    <span class="keyword">if</span>(!t_start) &#123;</span><br><span class="line">      t_start = t_current</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果超过must则执行一次，否则延迟delay执行</span></span><br><span class="line">    <span class="keyword">if</span>(t_current - t_start &gt; must) &#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">      t_start = t_current</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时，我们应该对<code>scroll</code>事件绑定节流事件才对。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">init() &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">this</span>._throttleFn = <span class="keyword">this</span>.throttle(<span class="keyword">this</span>.inViewShow)</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>._throttleFn)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 卸载事件此时应该替换成</span></span><br><span class="line"><span class="built_in">document</span>.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>._throttleFn)</span><br></pre></td></tr></table></figure>
<p>就这样，晚安！！:crescent_moon:</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>懒加载</tag>
      </tags>
  </entry>
  <entry>
    <title>斐波那契数列</title>
    <url>/2019/02/06/fibonacci/</url>
    <content><![CDATA[<p>ps：斐波那契数列数列，[1,2,3,5,8,13,21…],从第三项开始，当前项是前两项的和的一组数</p>
<p>今天在微信群看到了这个面试题，求 第 100 个的斐波那契数</p>
<h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><p>常见的写法是这样的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci1</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) <span class="keyword">return</span> n</span><br><span class="line">  <span class="keyword">return</span> fibonacci1(n - <span class="number">1</span>) + fibonacci1(n - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fibonacci1(50) = 20365011074</span></span><br><span class="line"><span class="comment">// time = 140550.01586914062ms</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>ok，代码没问题，打印一下吧，<code>console.log(fibonacci(100))</code>,发现打印不出来，计算太庞大了，简单 3 行的递归 function，竟然导致了浏览器崩溃，难以置信，但事实如此。</p>
<p>也别第 100 个了，就第 50 个，计算需要 140 多秒，别问我怎么知道的，<code>console.time</code> 和<code>console.timeEnd</code>了解一下。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>考虑一下怎么优化，用时长应该是需要递归调用所以才比较耗费时间，但我们好像只需要<code>fibonacci(n - 1)</code>与<code>fibonacci(n - 2)</code>两个值，把它作为变量存储起来，可以大大减少内存开销。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> next = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> temp</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    temp = current</span><br><span class="line">    current = next</span><br><span class="line">    next += temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fibonacci2(50) = 20365011074</span></span><br><span class="line"><span class="comment">// time = 4.26513671875ms</span></span><br></pre></td></tr></table></figure>
<p>emmmm,用时 4.几 ms，ms！！！不是 s！！提升万倍不是梦</p>
<h2 id="ES6-考虑一下？"><a href="#ES6-考虑一下？" class="headerlink" title="ES6 考虑一下？"></a>ES6 考虑一下？</h2><p>递归累加，高阶函数 reduce 干这个活不是最合适的吗,reduce 接收 2 个参数，一个是为累加器，另外一个为累加器的初始值<br>，下面是 js 代码,这里 p 保存 F(n-1)值，而 seed 则保存 F(n-2)的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci3</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> seed = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> [...Array(n)].reduce(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = p + seed</span><br><span class="line">    seed = p</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">  &#125;, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fibonacci3(50) = 20365011074</span></span><br><span class="line"><span class="comment">// time = 4.301025390625ms</span></span><br></pre></td></tr></table></figure>
<h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>百度到的，根据斐波那契公式改写，感觉很神奇，数学学渣表示看不懂</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci4</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SQRT_FIVE = <span class="built_in">Math</span>.sqrt(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.round(</span><br><span class="line">    (<span class="number">1</span> / SQRT_FIVE) *</span><br><span class="line">      (<span class="built_in">Math</span>.pow(<span class="number">0.5</span> + SQRT_FIVE / <span class="number">2</span>, n + <span class="number">1</span>) -</span><br><span class="line">        <span class="built_in">Math</span>.pow(<span class="number">0.5</span> - SQRT_FIVE / <span class="number">2</span>, n + <span class="number">1</span>))</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fibonacci4(50) = 20365011074</span></span><br><span class="line"><span class="comment">// time = 2.782958984375ms</span></span><br></pre></td></tr></table></figure>
<p>目前数学公式是性能最好的一个</p>
<p>emmmmm,为什么我查到的资料，斐波那契数列都是从 0 开始的，我是举了一个假的 🌰 吗 ？？ ，代码就这样了，道理是相同的，如果从 0 开始，改下限制条件就是了。</p>
<p>不开心，:smiling_imp:</p>
<p>晚安, :last_quarter_moon_with_face:</p>
<h2 id="一个从-0-开始的斐波那契数列"><a href="#一个从-0-开始的斐波那契数列" class="headerlink" title="一个从 0 开始的斐波那契数列"></a>一个从 0 开始的斐波那契数列</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fibarr = []</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      fibarr.push(i)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fibarr.push(fibarr[i - <span class="number">1</span>] + fibarr[i - <span class="number">2</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    i++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fibarr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// n 为数列长度</span></span><br></pre></td></tr></table></figure>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li style="list-style: none"><input type="checkbox"> 通过 generator 实现</li>
<li style="list-style: none"><input type="checkbox"> 通过尾调用实现</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6其他特性</title>
    <url>/2019/02/06/es6/</url>
    <content><![CDATA[<h2 id="1-模板字符串"><a href="#1-模板字符串" class="headerlink" title="1.模板字符串"></a>1.模板字符串</h2><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> address = <span class="string">"南京"</span></span><br><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"小明在"</span> + address + <span class="string">"工作"</span>)</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`小明在<span class="subst">$&#123;address&#125;</span>工作`</span>)</span><br></pre></td></tr></table></figure>
<p>关于模板字符串还有许多其他的技巧</p>
<h2 id="2-解构赋值"><a href="#2-解构赋值" class="headerlink" title="2.解构赋值"></a>2.解构赋值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">  name: <span class="string">"lux"</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> name = people.name</span><br><span class="line"><span class="keyword">const</span> age = people.age</span><br><span class="line"><span class="built_in">console</span>.log(name + <span class="string">" --- "</span> + age)</span><br><span class="line"><span class="comment">// 在es6之前我们是用上面这样的方法来取值的，一点毛病没有，es6之后我们是来使用解构的形式来取值的，像下面这样</span></span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">  name: <span class="string">"lux"</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = people</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>)</span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">const</span> color = [<span class="string">"red"</span>, <span class="string">"blue"</span>]</span><br><span class="line"><span class="keyword">const</span> [first, second] = color</span><br><span class="line"><span class="built_in">console</span>.log(first) <span class="comment">//'red'</span></span><br><span class="line"><span class="built_in">console</span>.log(second) <span class="comment">//'blue'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 之箭头函数</title>
    <url>/2019/02/06/arrow/</url>
    <content><![CDATA[<p>为了梳理知识点，写一下 8102 年的箭头函数<br>(ps:我写分号了，不过被我配置的 ide 的格式规则给抹平了)；</p>
<a id="more"></a>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fun = <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多个参数并需要返回对象的情况下可以这样</span></span><br><span class="line"><span class="comment">// 两个参数的默认值为0，es6设置默认值的方法，解构赋值时也可以设置默认值</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="function">(<span class="params">a = <span class="number">0</span>, b = <span class="number">0</span></span>) =&gt;</span> (&#123; <span class="attr">total</span>: a + b &#125;)</span><br><span class="line"><span class="comment">// 参数解构并设置默认值的写法</span></span><br><span class="line"><span class="keyword">const</span> fun = <span class="function">(<span class="params">&#123; a = <span class="number">0</span>, b = <span class="number">0</span> &#125;</span>) =&gt;</span> (&#123; <span class="attr">total</span>: a + b &#125;)</span><br><span class="line"><span class="comment">// 可以这样调用</span></span><br><span class="line"><span class="keyword">const</span> ret = fun(&#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;)</span><br><span class="line"><span class="comment">//或使用默认值</span></span><br><span class="line"><span class="keyword">const</span> ret = fun()</span><br></pre></td></tr></table></figure>
<h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><h3 id="1-不能被-new"><a href="#1-不能被-new" class="headerlink" title="1.不能被 new"></a>1.不能被 new</h3><p>就是不能通过 new 关键字被调用, js 函数的内部属性中包含了[[Construct]],当 new 实例发生时，调用该方法。<br>通俗点讲就是 new 操作符执行了一个内部的 function 从而创建了一个空对象，这个对象原型指向构造函数的 prototype，执行构造函数后返回这个对象（return this）。<br>but，箭头函数没有这个构造器，所以 new 时会抛出一个错误</p>
<h3 id="2-没有原型"><a href="#2-没有原型" class="headerlink" title="2.没有原型"></a>2.没有原型</h3><p>不能被 new，就没有构造原型的必要，不难理解，才导致了没有 prototype 的</p>
<h3 id="3-不能被-super"><a href="#3-不能被-super" class="headerlink" title="3.不能被 super"></a>3.不能被 super</h3><p>既然原型都没得，肯定也不能用 super 访问原型属性。but，要值得说下的是，super 和 this 类似，取的是最近一层非箭头函数的值</p>
<h3 id="4-没有-arguments"><a href="#4-没有-arguments" class="headerlink" title="4.没有 arguments"></a>4.没有 arguments</h3><p>没有此内部属性，同 super 和 this 一样，取最近一层函数的 arguments</p>
<h3 id="5-没有-this"><a href="#5-没有-this" class="headerlink" title="5. 没有 this"></a>5. <b>没有 this</b></h3><p>这里引用冴羽大大的例子，<a href="https://juejin.im/post/5b14d0b4f265da6e60393680" target="_blank" rel="noopener">原文在这里</a></p>
<p>箭头函数没有 this，所以需要通过查找作用域链来确定 this 的值。</p>
<p>这就意味着如果箭头函数被非箭头函数包含，this 绑定的就是最近一层非箭头函数的 this。</p>
<p>模拟一个实际开发中的例子：</p>
<p>我们的需求是点击一个按钮，改变该按钮的背景色。</p>
<p>为了方便开发，我们抽离一个 Button 组件，当需要使用的时候，直接：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传入元素 id 值即可绑定该元素点击时改变背景色的事件</span></span><br><span class="line"><span class="keyword">new</span> Button(<span class="string">"button"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>点击变色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js 是下面这样的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.querySelector(<span class="string">"#"</span> + id)</span><br><span class="line">  <span class="keyword">this</span>.bindEvent()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Button.prototype.bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element.addEventListener(<span class="string">"click"</span>, <span class="keyword">this</span>.setBgColor, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Button.prototype.setBgColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element.style.backgroundColor = <span class="string">"#1abc9c"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button = <span class="keyword">new</span> Button(<span class="string">"button"</span>)</span><br></pre></td></tr></table></figure>
<p>看着好像没有问题，结果却是报错 <font color="red">Uncaught TypeError: Cannot read property ‘style’ of undefined</font></p>
<p>这是因为当使用 addEventListener() 为一个元素注册事件的时候，事件函数里的 this 值是该元素的引用。</p>
<p>所以如果我们在 setBgColor 中 console.log(this)，this 指向的是按钮元素，那 this.element 就是 undefined，报错自然就理所当然了。</p>
<p>也许你会问，既然 this 都指向了按钮元素，那我们直接修改 setBgColor 函数为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Button.prototype.setBgColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.style.backgroundColor = <span class="string">"#1abc9c"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不就可以解决这个问题了？</p>
<p>确实可以这样做，但是在实际的开发中，我们可能会在 setBgColor 中还调用其他的函数，比如写成这种：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Button.prototype.setBgColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setElementColor()</span><br><span class="line">  <span class="keyword">this</span>.setOtherElementColor()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以我们还是希望 setBgColor 中的 this 是指向实例对象的，这样就可以调用其他的函数。</p>
<p>利用 ES5，我们一般会这样做：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Button.prototype.bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element.addEventListener(<span class="string">"click"</span>, <span class="keyword">this</span>.setBgColor.bind(<span class="keyword">this</span>), <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为避免 addEventListener 的影响，使用 bind 强制绑定 setBgColor() 的 this 为实例对象</p>
<p>使用 ES6，我们可以更好的解决这个问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Button.prototype.bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element.addEventListener(<span class="string">"click"</span>, event =&gt; <span class="keyword">this</span>.setBgColor(event), <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于箭头函数没有 this，所以会向外层查找 this 的值，即 bindEvent 中的 this，此时 this 指向实例对象，所以可以正确的调用 this.setBgColor 方法， 而 this.setBgColor 中的 this 也会正确指向实例对象。</p>
<p>在这里再额外提一点，就是注意 bindEvent 和 setBgColor 在这里使用的是普通函数的形式，而非箭头函数，如果我们改成箭头函数，会导致函数里的 this 指向 window 对象 (非严格模式下)。</p>
<p>最后，因为箭头函数没有 this，所以也不能用 call()、apply()、bind() 这些方法改变 this 的指向，可以看一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="keyword">this</span>.value).bind(&#123; <span class="attr">value</span>: <span class="number">2</span> &#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 实现三角形</title>
    <url>/2019/02/06/css-triangle/</url>
    <content><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent red transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box4</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent transparent red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fzwu5erw0vj30740f40sj.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>图形</tag>
      </tags>
  </entry>
  <entry>
    <title>两款简洁的 loading 动画</title>
    <url>/2019/02/06/loading/</url>
    <content><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动画1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"donut"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动画2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bouncing-loader"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> donut-spin &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.donut</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="built_in">rgba</span>(0, 0, 0, 0.1);</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#7983ff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: donut-spin <span class="number">1.2s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> bouncing-loader &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.1</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-1rem);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bouncing-loader</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bouncing-loader</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">3rem</span> <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: bouncing-loader <span class="number">0.6s</span> infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bouncing-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bouncing-loader</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>录屏速度有点快，实际上动画速度是正常的（移动端可能不会动）<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fzwu5p6thog308y07uaba.gif" alt=""></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 插件与配置</title>
    <url>/2019/02/06/vscode/</url>
    <content><![CDATA[<p>所谓磨刀不误砍柴工，作为一个前端菜鸟更应该把刀磨快一点。<br>总结了一下我自己常用的 vscode 的插件以及 setting.json 如何配置，可以更好的提高开发效率。</p>
<a id="more"></a>
<h2 id="插件集合"><a href="#插件集合" class="headerlink" title="插件集合"></a>插件集合</h2><table>
<thead>
<tr>
<th>插件名</th>
<th>插件功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Auto Close Tag</td>
<td>自动关闭 html/xml 标签</td>
</tr>
<tr>
<td>Auto Rename Tag</td>
<td>自动匹配关闭标签</td>
</tr>
<tr>
<td>Can I Use</td>
<td>html5,css3,svg 的浏览器兼容查询</td>
</tr>
<tr>
<td>HTML CSS Class Completion CSS</td>
<td>class 提示</td>
</tr>
<tr>
<td>HTML CSS Support</td>
<td>css 提示（支持 vue）</td>
</tr>
<tr>
<td>background</td>
<td>主题背景图（windows）</td>
</tr>
<tr>
<td>Bracket Pair Colorizer</td>
<td>彩虹括号，轻松找到对应括号的另外一半</td>
</tr>
<tr>
<td>colorize</td>
<td>颜色显示，主要用于 css 写入颜色类样式时直接显示该颜色</td>
</tr>
<tr>
<td>Document This</td>
<td>智能添加注释</td>
</tr>
<tr>
<td>ES7 React/Redux/GraphQL/React-Native snippets</td>
<td>react/redux/react native 代码片段</td>
</tr>
<tr>
<td>ESlint</td>
<td>代码风格检查，智能提醒报错，培养一个良好的代码风格才是重要的事</td>
</tr>
<tr>
<td>Git Blame</td>
<td>检测每一行代码的提交记录</td>
</tr>
<tr>
<td>indent-rainbow</td>
<td>彩虹缩进</td>
</tr>
<tr>
<td>Indenticator</td>
<td>选中一行智能匹配代码块并连线</td>
</tr>
<tr>
<td>JavaScript (ES6) code snippets</td>
<td>es6 代码片段</td>
</tr>
<tr>
<td>Lodash Snippets</td>
<td>lodash 代码片段</td>
</tr>
<tr>
<td>miniapp</td>
<td>微信小程序标签/属性的智能补全，支持原生小程序/mpvue/wepy，包含代码片段</td>
</tr>
<tr>
<td>Output Colorizer</td>
<td>输出面板彩虹提示</td>
</tr>
<tr>
<td>Prettier - Code formatter</td>
<td>代码格式化，需要配合 setting.json 使用</td>
</tr>
<tr>
<td>Quokka.js</td>
<td>自动计算结果并显示，省去 console.log()的调试</td>
</tr>
<tr>
<td>TODO Highlight</td>
<td>TODO FIXME 高亮</td>
</tr>
<tr>
<td>Vetur</td>
<td>vue 官方插件</td>
</tr>
<tr>
<td>VueHelper</td>
<td>vue2 代码段，包含 vue2api，vur-router2，vuex2</td>
</tr>
<tr>
<td>vscode-fileheader</td>
<td>一键生成文件头，并自动保存修改时间,配合 setting.json 使用</td>
</tr>
<tr>
<td>vscode icons</td>
<td>文件图标，方便定位文件</td>
</tr>
<tr>
<td>Setting Sync</td>
<td>vscode 配置同步到 gist，意味着不用再换电脑就要重写一次配置了</td>
</tr>
</tbody>
</table>
<h2 id="IDE-的配置-setting-json"><a href="#IDE-的配置-setting-json" class="headerlink" title="IDE 的配置 setting.json"></a>IDE 的配置 setting.json</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "fileheader.Author": "chenghao", //vscode-fileheader 使用</span><br><span class="line">  "fileheader.LastModifiedBy": "chenghao", //vscode-fileheader 使用</span><br><span class="line">  "editor.fontSize": 14, // 编辑器字号</span><br><span class="line">  "editor.tabSize": 2, // 1个制表符的缩进大小</span><br><span class="line">  "editor.lineHeight": 17, // 通过使用鼠标滚轮同时按住 Ctrl 可缩放编辑器的字体</span><br><span class="line">  "editor.mouseWheelZoom": true, // 行太长自动换行</span><br><span class="line">  "editor.wordWrap": "on",</span><br><span class="line">  "explorer.confirmDelete": false, // 控制文件资源管理器删除文件到废纸篓是否进行确认</span><br><span class="line">  "terminal.integrated.shell.windows": "C:\\Windows\\System32\\cmd.exe", // 终端，mac可省略</span><br><span class="line">  "breadcrumbs.enabled": true, //启用面包屑导航</span><br><span class="line">  "workbench.editor.enablePreview": false, //打开文件不覆盖</span><br><span class="line">  "editor.formatOnSave": true, //保存时是否进行格式化</span><br><span class="line">  "search.exclude": &#123;</span><br><span class="line">    // 搜索黑名单</span><br><span class="line">    "**/node_modules": true,</span><br><span class="line">    "**/bower_components": true,</span><br><span class="line">    "**/dist": true,</span><br><span class="line">    "**/build": true,</span><br><span class="line">    "**/.git": true,</span><br><span class="line">    "**/.gitignore": true,</span><br><span class="line">    "**/.svn": true,</span><br><span class="line">    "**/.DS_Store": true,</span><br><span class="line">    "**/.idea": true,</span><br><span class="line">    "**/.vscode": false,</span><br><span class="line">    "**/yarn.lock": true</span><br><span class="line">  &#125;,</span><br><span class="line">  "files.associations": &#123;</span><br><span class="line">    // 配置文件关联，以便启用对应的智能提示，比如wxss使用css</span><br><span class="line">    "*.vue": "vue",</span><br><span class="line">    "*.wxss": "css"</span><br><span class="line">  &#125;,</span><br><span class="line">  "background.enabled": true, // background插件是否可用，以下是对background插件的配置</span><br><span class="line">  "background.useDefault": false,</span><br><span class="line">  "background.customImages": ["file:///F:/background/3.jpg"],</span><br><span class="line">  "background.useFront": false,</span><br><span class="line">  "background.style": &#123;</span><br><span class="line">    "content": "''",</span><br><span class="line">    "pointer-events": "none",</span><br><span class="line">    "position": "absolute",</span><br><span class="line">    "top": "0",</span><br><span class="line">    "right": "0",</span><br><span class="line">    "width": "100%",</span><br><span class="line">    "height": "100%",</span><br><span class="line">    "z-index": "99999",</span><br><span class="line">    "background.repeat": "no-repeat",</span><br><span class="line">    "background-size": "contain",</span><br><span class="line">    "opacity": 0.1</span><br><span class="line">  &#125;,</span><br><span class="line">  "prettier.semi": false, //是否使用分号</span><br><span class="line">  "prettier.tabWidth": 2,</span><br><span class="line">  "prettier.singleQuote": true, // 是否使用单引号，true则在js中不能使用双引号</span><br><span class="line">  "prettier.printWidth": 120, //每行代码在该数字范围内，分辨率大可以把它写大些</span><br><span class="line">  "eslint.validate": [</span><br><span class="line">    // eslint 验证文件类型</span><br><span class="line">    "javascript",</span><br><span class="line">    "javascriptreact",</span><br><span class="line">    &#123; "language": "vue", "autoFix": true &#125;,</span><br><span class="line">    &#123; <span class="attr">"language"</span>: <span class="string">"html"</span>, <span class="attr">"autoFix"</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  "eslint.autoFixOnSave": true, // ctrl+s 保存时自动修正格式错误的js代码</span><br><span class="line">  "vetur.format.defaultFormatter.js": "vscode-typescript", //格式化的风格覆盖vscode的默认配置</span><br><span class="line">  "javascript.format.insertSpaceBeforeFunctionParenthesis": true, // 函数定义与后面括号之间增加一个空格</span><br><span class="line">  "vetur.format.defaultFormatter.html": "js-beautify-html", //格式化.vue中html</span><br><span class="line">  "vetur.format.defaultFormatterOptions": &#123;</span><br><span class="line">    "js-beautify-html": &#123;</span><br><span class="line">      "wrap_attributes": "force" //属性强制折行对齐</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>真正做到拿来既用，希望对你有帮助 💕</p>
<p>晚安 🌙</p>
]]></content>
      <tags>
        <tag>vscode</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>一件开心的事</title>
    <url>/2019/02/06/happy/</url>
    <content><![CDATA[<p><b>我的九儿回来了</b><br><b>2018-10-29 19:31:00</b><br><b>值得纪念</b><br>❤️</p>
]]></content>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>遗憾</title>
    <url>/2019/02/06/regret/</url>
    <content><![CDATA[<p>刷抖音看到这样一段话</p>
<blockquote>
<p>世界上的事情<br>最忌讳的就是个十全十美<br>你看那天上的月亮<br>一旦圆满了，马上就要亏厌<br>树上的果子，一旦熟透了，马上就要坠落<br>凡事总要稍留欠缺，才能持恒</p>
</blockquote>
<p>深以为然</p>
]]></content>
      <tags>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>读余华《活着》</title>
    <url>/2019/02/06/alive/</url>
    <content><![CDATA[<h1 id="读余华《活着》"><a href="#读余华《活着》" class="headerlink" title="读余华《活着》"></a>读余华《活着》</h1><p>早些年，好像是上初中的时候吧，因为我家和爷爷奶奶家就隔了一堵墙，我晚上经常在爷爷奶奶那里睡，那时候河北电视台有部电视剧叫《福贵》，有的时候看到他们一边哭一边看这个剧，很是不解。</p>
<p>奶奶说：“里面的事情都是我们实实在在经历过的，你们是赶上好时候了”，说完就继续抹眼泪。</p>
<p>大学后有个山东的大兄弟在宿舍经常刷老剧，《大宅门》《福贵》都刷了一个遍，我才得知《福贵》改编自余华的《活着》。现在转眼已经毕业两年，最近的一些事确实也侵扰到了我，决定静下心来拜读《活着》。</p>
<a id="more"></a>
<h2 id="输完家产"><a href="#输完家产" class="headerlink" title="输完家产"></a>输完家产</h2><p>如果不是嫖和赌，福贵可能到解放前都是过的少爷的日子，锦衣玉食，甚至出门都是雇工背着。赌博害人，赊账赌更甚。直到债主不赊了，福贵才知道把一百多亩家产输完了。</p>
<p>福贵爹年轻的时候也赌，那时候家底殷实，没有败光。他自己也说徐家出了两个败家子。得知福贵输光家产后，第一次从粪缸上掉下来了，终于被生活压倒了，再没有起来。</p>
<p>龙二也着实可怜，本来赢来的家产，最后却因解放分地挨了五个枪子。最后龙二的那句“福贵，我这是替你去死啊”，我深以为然。</p>
<p>没有谁能独善其身，身在社会性的集体中尤甚。长根在福贵家做了一辈子长工，因为福贵的赌输家产，也害的长根本该退休的年纪却开始要饭，等再一次见到长根时，还为凤霞带了小礼物，然后再没有出现过,估计是死了。因为福贵的错，长根却没有善终，每一个人的或大或小的决定，都在影响着别人，只不过这种影响分两种，一种是看得见的，一种是深埋心里的。</p>
<h2 id="家珍"><a href="#家珍" class="headerlink" title="家珍"></a>家珍</h2><p>这个女人，不可谓不傻，即便那个年代背景下，那个家庭条件下，就算随她爹去了城里，与福贵老死不相往来，也不算离经叛道。<br>可她没有这么做呀，在城里把有庆生下来之后就回来了。是幸运也是不幸，幸运的是福贵，不幸的是家珍。</p>
<h2 id="抽血"><a href="#抽血" class="headerlink" title="抽血"></a>抽血</h2><p>这段真的是越看越难受，为了县长媳妇，硬是把有庆抽干了血，偏偏县长是春生， 一个壮丁时期的好朋友。</p>
<blockquote>
<p>我看着那条弯曲着通向城里的小路，听不到我儿子赤脚跑来的声音，月光照在路上，像是洒满了盐。</p>
</blockquote>
<blockquote>
<p>有庆一死，家珍也就活不长了</p>
</blockquote>
<p>这书还是不读了，丧的人真的不适合读这本书。</p>
<h2 id="写在双十一"><a href="#写在双十一" class="headerlink" title="写在双十一"></a>写在双十一</h2><p>今天是双十一了，终于把《活着》读完了，最近这几天虽然不是很忙，但是心累，一个人找房，然后一个人搬家，再然后退宽带，退房…我妈说我是自己给自己的压力太大了，仔细想想好像确实是这么回事。趁着双十一我也买了一些东西，现在是等待收货期间。后面这段时间，我会努力做好 4 件事：</p>
<p>1.减压</p>
<p>2.为自己做好下段时间的规划</p>
<p>3.梳理前端知识点，面试题，并整理到 github 上</p>
<p>4.认真学习一本小册</p>
<p>我们同情福贵式的人，但唯恐在福贵身上到自己的影子，所以还是把握好眼前，加油！</p>
]]></content>
      <tags>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>【webpack学习之路】2. 配置加载css/图片/字体</title>
    <url>/2019/02/06/webpack-demo2/</url>
    <content><![CDATA[<h1 id="加载-css，图片，字体-简单配置"><a href="#加载-css，图片，字体-简单配置" class="headerlink" title="加载 css，图片，字体 简单配置"></a>加载 css，图片，字体 简单配置</h1><p>上一步对 webpack 入口和出口进行了简单配置，并成功引用。上一步的<a href="https://ch957869975.github.io/hexo-blog/2019/02/06/webpack-demo1/#more">配置参考</a></p>
<h2 id="配置加载-css"><a href="#配置加载-css" class="headerlink" title="配置加载 css"></a>配置加载 css</h2><p>在 webpack 中，所有的文件均被视为模块。特定类型的模块需要特定的解释器来解释，这种解释机制被称为<code>loader</code>。对 css 而言，需要用到<code>style-loader</code>与<code>css-loader</code>。先安装这两个 loader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i css-loader style-loader -D</span><br></pre></td></tr></table></figure>
<h3 id="配置-loader"><a href="#配置-loader" class="headerlink" title="配置 loader"></a>配置 loader</h3><p>在<code>webpack.config.js</code>中配置 <code>loader</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">//使用正则表达式匹配某种类型的文件，这里配置的是后缀为css的文件</span></span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>] <span class="comment">//loader名称</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>配好之后，就可以在 js 中通过 import 导入你想加载的 css 文件了，在<code>src</code>下新建<code>style.css</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hello</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>index.html</code>与上一文章相同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.css"</span></span><br><span class="line"><span class="keyword">const</span> render = <span class="function">(<span class="params">tagname = <span class="string">"div"</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(tagname)</span><br><span class="line">  elem.innerHTML = <span class="string">"Hello Webapck demo02!"</span></span><br><span class="line">  <span class="keyword">return</span> elem</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(render())</span><br></pre></td></tr></table></figure>
<p>执行 <code>npm run build</code>后，打开<code>dist/index.html</code>,可以看到<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzwr6qku10j30gi04cdfp.jpg" alt=""></p>
<p>得知，样式得到正常加载</p>
<h2 id="配置加载图片"><a href="#配置加载图片" class="headerlink" title="配置加载图片"></a>配置加载图片</h2><p>加载图片需要用到<code>file-loader</code>,先安装之。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i file-loader -D</span><br></pre></td></tr></table></figure>
<p>配置到<code>webpack.config.js</code>中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">    use: [<span class="string">"file-loader"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>然后将<code>heart.png</code>放进<code>src</code>目录，修改<code>src/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> picture <span class="keyword">from</span> <span class="string">"./heart.png"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="function">(<span class="params">tagname = <span class="string">"div"</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(tagname)</span><br><span class="line">  elem.innerHTML = <span class="string">"Hello Webapck demo02!"</span></span><br><span class="line">  elem.classList.add(<span class="string">"hello"</span>)</span><br><span class="line">  <span class="keyword">const</span> pic = <span class="keyword">new</span> Image()</span><br><span class="line">  pic.src = picture</span><br><span class="line">  element.appendChild(pic)</span><br><span class="line">  <span class="keyword">return</span> elem</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(render())</span><br></pre></td></tr></table></figure>
<p>执行<code>npm run build</code>之后打开页面，效果如图</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzwrrjy0n8j30r20e6749.jpg" alt=""></p>
<p>图片被正常加载进去了，那好，我们现在把 js 中的图片删去，以背景图的方式添加尝试一下。修改<code>style.css</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hello</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"./heart.png"</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新打包并打开页面</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzws1zecqlj30gy0daq2z.jpg" alt=""></p>
<p>样式得以正常加载</p>
<h2 id="配置字体文件"><a href="#配置字体文件" class="headerlink" title="配置字体文件"></a>配置字体文件</h2><p>上面已经添加了<code>file-loader</code>,这里直接配置字体文件的加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|svg|jpg|gif|woff|woff2|eot|ttf|otf|TTF)$/</span>,</span><br><span class="line">    use: [<span class="string">"file-loader"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>添加自定义样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"MyFont"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"./font.TTF"</span>) <span class="built_in">format</span>(<span class="string">"truetype"</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hello</span> &#123;</span><br><span class="line">  <span class="comment">/*上部分省略*/</span></span><br><span class="line">  <span class="attribute">font-family</span>: MyFont;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新打包，页面打开，效果如下</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fzwsje9evbj30ew0dwmx6.jpg" alt=""></p>
<p>字体得以正常加载</p>
<p>本节<a href="https://github.com/ch957869975/webpack-demo/tree/master/demo02" target="_blank" rel="noopener">源码在此</a></p>
]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>【webpack学习之路】1. 初步配置webpack</title>
    <url>/2019/02/06/webpack-demo1/</url>
    <content><![CDATA[<h1 id="开始前的准备"><a href="#开始前的准备" class="headerlink" title="开始前的准备"></a>开始前的准备</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>创建一个空项目<code>webpack-demo</code>,并创建 <code>.gitingnore</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir webpack-demo</span><br><span class="line">touch .gitingnore</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>后续会在<code>webpack-demo</code>中创建多个 demo，每个 demo 单独成为一个小项目，所以<code>.gitignore</code>得把 demo 下的<code>node_moudules</code>忽略掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">**/node_modules</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br></pre></td></tr></table></figure>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i webpack -g</span><br></pre></td></tr></table></figure>
<h2 id="局部安装"><a href="#局部安装" class="headerlink" title="局部安装"></a>局部安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i webpack</span><br></pre></td></tr></table></figure>
<h1 id="对-webpack-进行初步配置"><a href="#对-webpack-进行初步配置" class="headerlink" title="对 webpack 进行初步配置"></a>对 webpack 进行初步配置</h1><p>进入到我们上一步创建的空项目中，创建一个 demo01 的子项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir demo01</span><br><span class="line">cd demo01</span><br><span class="line">npm init -y</span><br><span class="line">npm i webpack-cli webpack -D</span><br></pre></td></tr></table></figure>
<h2 id="配置目录结构"><a href="#配置目录结构" class="headerlink" title="配置目录结构"></a>配置目录结构</h2><p>当然，使用<code>yarn</code>作为包管理工具也是可以的。项目结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── dist</span><br><span class="line">│   ├── bundle.js</span><br><span class="line">│   └── index.html</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   └── index.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure>
<p>ps: <code>package-lock.json</code> 不用过多关注</p>
<h3 id="index-html-amp-index-js"><a href="#index-html-amp-index-js" class="headerlink" title="index.html &amp; index.js"></a>index.html &amp; index.js</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对应的 js 就是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> render = <span class="function">(<span class="params">tagname = <span class="string">"div"</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> elem = <span class="built_in">document</span>.createElement(tagname)</span><br><span class="line">  elem.innerHTML = <span class="string">"Hello Webapck !"</span></span><br><span class="line">  <span class="keyword">return</span> elem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(render())</span><br></pre></td></tr></table></figure>
<p>暂时还没配置<code>babel</code>,请在谷歌浏览器预览</p>
<h3 id="配置-webpack"><a href="#配置-webpack" class="headerlink" title="配置 webpack"></a>配置 webpack</h3><p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>) <span class="comment">//node自带的path模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span>, <span class="comment">//入口文件配置</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">//出口文件配置</span></span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用-npm-脚本"><a href="#使用-npm-脚本" class="headerlink" title="使用 npm 脚本"></a>使用 npm 脚本</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">"scripts": &#123;</span><br><span class="line">  // ...</span><br><span class="line">  "build": "webpack" // 在package.json中添加一行命令</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在控制台中就可以执行<code>npm run build</code>命令了,然后打开页面可以看到页面正确渲染了。</p>
<p>感谢阅读，<a href="https://github.com/ch957869975/webpack-demo/tree/master/demo01" target="_blank" rel="noopener">源码在此</a></p>
]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用css绘制心形</title>
    <url>/2019/02/06/graph/</url>
    <content><![CDATA[<h1 id="如何使用-css-绘制心形"><a href="#如何使用-css-绘制心形" class="headerlink" title="如何使用 css 绘制心形"></a>如何使用 css 绘制心形</h1><p>常遇到心形图案，比如点赞和取消点赞的使用场景。之前的使用方式是图片接入，作为<code>img</code> 或 <code>backgroundImage</code> 插入到 dom 中去。现在自己动手用 css 绘制一个心形图案。</p>
<a id="more"></a>
<h2 id="心形"><a href="#心形" class="headerlink" title="心形"></a>心形</h2><p>准备一个<code>dom</code>元素如下,为其<code>id</code>赋值为<code>heart</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"heart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加宽高</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#heart</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在它应该是一个宽<code>50px</code>,高<code>40px</code>的矩形，没跑了。现在开始操作伪元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*上一步骤的代码省略...*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>emmm… 形状无法描述，上图吧还是…到现在为止的形状应该是这个样子的。<br><img src="https://user-gold-cdn.xitu.io/2019/2/6/168c0906096c8752?w=148&amp;h=116&amp;f=jpeg&amp;s=2672" alt=""></p>
<p>接下来要做的是将<code>before</code>和<code>after</code>两块内容旋转。代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">40px</span> <span class="number">40px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上图上图…</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/2/6/168c09dcf6787c68?w=228&amp;h=194&amp;f=jpeg&amp;s=3275" alt=""></p>
<p>效果已出，感谢阅读。</p>
<p><a href="https://codepen.io/ch957869975/pen/RvLgEg" target="_blank" rel="noopener">源码在此</a></p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>图形</tag>
      </tags>
  </entry>
</search>
